import git # type: ignore
import shutil
from pathlib import Path

class RepositoryManager:
    def __init__(self, base_dir="cloned_repos"):
        self.base_dir = Path(base_dir)
        self.base_dir.mkdir(exist_ok=True)
    
    def clone_repository(self, repo_url: str, folder_name: str = None) -> Path:
        """–ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É"""
        
        if folder_name is None:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ URL
            folder_name = repo_url.split('/')[-1].replace('.git', '')
        
        clone_path = self.base_dir / folder_name
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if clone_path.exists():
            shutil.rmtree(clone_path)
            print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–∞–ø–∫–∞: {folder_name}")
        
        try:
            print(f"‚¨áÔ∏è  –ö–ª–æ–Ω–∏—Ä—É–µ–º {repo_url} –≤ {clone_path}...")
            
            # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            repo = git.Repo.clone_from(repo_url, clone_path)
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤: {clone_path}")
            print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {repo.head.commit.message[:50]}...")
            
            return clone_path
            
        except git.exc.GitCommandError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return None
    
    def clone_github_repo(self, owner: str, repo_name: str, use_https: bool = True) -> Path:
        """–ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å GitHub –ø–æ –∏–º–µ–Ω–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        
        if use_https:
            repo_url = f"https://github.com/{owner}/{repo_name}.git"
        else:
            repo_url = f"git@github.com:{owner}/{repo_name}.git"
        
        return self.clone_repository(repo_url, repo_name)
    
    def get_repo_info(self, repo_path: Path) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"""
        try:
            repo = git.Repo(repo_path)
            
            return {
                'path': str(repo_path),
                'branch': repo.active_branch.name,
                'commit': repo.head.commit.hexsha[:8],
                'message': repo.head.commit.message,
                'files_count': len(list(repo_path.rglob('*'))),
                'size_mb': self.get_folder_size(repo_path)
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
            return {}
    
    def get_folder_size(self, path: Path) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ –≤ –ú–ë"""
        total_size = 0
        for file_path in path.rglob('*'):
            if file_path.is_file():
                total_size += file_path.stat().st_size
        return round(total_size / (1024 * 1024), 2)